# Starting with GitHub

{{< include ../_patterns.qmd >}}

## Prerequisites {.unnumbered}

Get GitHub account.

- https://iyo-rstudio-global.netlify.app/collection/prework/



start by adding github from existing project:

https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/adding-and-cloning-repositories/adding-a-repository-from-your-local-computer-to-github-desktop

**Note restart RStudio to detect git**

### Best practices

1.  ![Victoria's git commit illustration](https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/cover_git-commit-art.png)

    If you are concerned about a messy string of commits, you can use the ["Repeated Amend" pattern](https://happygitwithr.com/repeated-amend.html) as you work to update a commit before pushing. We can also ["squash & merge"](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/about-pull-request-merges#squash-and-merge-your-pull-request-commits) when your work is done.

2.  When you start a Pull Request, you'll see a template with information for you, and a checklist. Please read this, and make sure your checklist is complete, before [marking your PR as ready for review](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request#marking-a-pull-request-as-ready-for-review).

> "Don't confuse the complex with the difficult. Most situations are simple -- many are just emotionally difficult to act upon."
>
> [Tim Ferriss](https://www.goodreads.com/quotes/1163373-don-t-confuse-the-complex-with-the-difficult-most-situations-are)

-   relationship between your local files and your remote files (in GitHub)

Now we are going to go online to <https://github.com/>,

idea: git with one year, second year, etc - explore file structure on your personal system

-   tie this into GitHub which is your remote system (almost like a sync)

-   When starting a new Quarto file, we recommend using a top-level `index.qmd` (better for sharing)

<!-- -->

-   with GitHub!
-   talking to others, if future thing doesn't pan out netlify drop

## Explore

## Understand

## Explain

tl;dr: simple single person collaboration pattern -

-   commit often, stakes are low,

-   write good commit messages,

-   use branches and PRs

how to write good commits?

We strongly encourage bite-sized commits! Please try to make only a single change per commit, and avoid including unrelated changes.

-   [good commit practices](https://victoria.dev/blog/git-commit-practices-your-future-self-will-thank-you-for/),

-   [best practices by Hadley Wickham](https://r-pkgs.org/git.html#commit-best-practices)

-   <https://cbea.ms/git-commit>

-   <https://github.com/knowbl/git-commit-message>

In GitHub desktop you can amend a single commit message if not pushed yet (i.e., you are unhappy with your previous commit message).

You can also undo the last commit.

You can also SQUASH more than one commit (if all are not pushed yet), rename it, and then push!!! See <https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/managing-commits/squashing-commits>

We can also ["squash & merge"](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/about-pull-request-merges#squash-and-merge-your-pull-request-commits) when your work is done (is there less memory involved if you use this method when you download the repo?)

## Share

simple collaborative pattern-

-   FORKS

how to do a pr? even to yourself?

1.  No no: doing a PR from your `main` branch. Yes yes: All PRs come from a new branch like `feature/add-analytics`. With Git, branches are cheap (actually, they are free), so please use them!

<!-- -->

1.  Here is a great write-up on [How to scope down PRs](https://www.netlify.com/blog/2020/03/31/how-to-scope-down-prs/) to make it easier to test, iterate, and review your PR.

2.  We strongly encourage [draft pull requests](https://github.blog/2019-02-14-introducing-draft-pull-requests/)! This is very helpful for us to see which PRs are in flight, and check in on the progress as you work. (if for a team or open source tool, usually good etiquette would actually be to start with an issue first, then go to draft PR; pair issue = PR. Easier to have a discussion in an issue than PR)

3.  If you are concerned about a messy string of commits, you can use the ["Repeated Amend" pattern](https://happygitwithr.com/repeated-amend.html) as you work to update a commit before pushing. git repeated amend (https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/managing-commits/amending-a-commit)
