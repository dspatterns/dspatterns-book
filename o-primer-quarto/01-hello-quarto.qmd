# Primer II: Quarto {.unnumbered}

```{r setup, include=FALSE, echo=FALSE}
library(tidyverse)
library(gt)
```

## Hello Quarto!

> tl;dr: - **Quarto** is a way to run R code and create a report from a combination of prose and code.

Reporting the results of a data analysis is quite important and is often the deliverable. R has something known as **Quarto** which is a format for writing code and prose in the same document. The idea for this comes from literate programming, where the mixture of source code for a computer program is intertwined both with an explanation of what the program is doing and also the results of running the program.
  
There are many advantages of taking this approach for all of your data analysis tasks:

  1. The explanation of the code is adjacent to the code itself; code comments are like this, but these explanations are more prominent and accessible than source code comments.
  2. There is no risk of having the code explanation and the code itself dissociated from one another; these two elements are tightly bound.
  3. A single document contains all of the analysis which is part code and part explanation. It's self-contained.

You may or may not be familiar with **Markdown**, which is a big part of this format. **Markdown** is a text markup language that translates really well to **HTML**. It was created as a very simple way for anybody (i.e., non-programmers) to write in an easy-to-read format that could be converted directly into **HTML**. The following table provides a quick rundown of what typical **Markdown** looks like before and after rendering to **HTML**.

```{r echo=FALSE}
tribble(
  ~a,                                         ~b,
  "`Plain text`",                             "Plain text",
  "`*italics* and **bold**`",                 "*italics* and **bold**",
  "`verbatim code`",                          "`verbatim code`",
  "`~~strikethrough~~`",
  "<span style='text-decoration:line-through;'>strikethrough</span>",
  "`subscript~2~ / superscript^2^`",          "subscript<sub>2</sub> / superscript<sup>2</sup>",
  "`[link](https://www.rstudio.com)`",        "[link](https://www.rstudio.com)",
  "`inline equation: $E=mc^2$`",              "inline equation: $E=mc^2$",
  "`# Biggest Heading`",                      "# Biggest Heading",
  "`###### Smallest Heading`",                
  "<span style='font-size:16px;'>Smallest Heading</span>",
  "`> block quote`",                          
  "<span style='padding-left:1rem;border-left-color:#999;border-left-style:solid;border-left-width:1px;'>block quote</span>",
  "`* unordered list`<br>`* item 2`<br>`   + sub-item 1`<br>`   + sub-item 2`",
  "* unordered list\n* item 2\n   + sub-item 1\n   + sub-item 2",
  
  "`1. ordered list`<br>`2. item 2`<br>`   + sub-item 1`<br>`   + sub-item 2`",
  "1. ordered list\n2. item 2\n   + sub-item 1\n   + sub-item 2",
) |>
  gt(caption = "Markdown Reference", id = "md_ref") |>
  fmt_markdown(columns = everything()) |>
  cols_label(
    a = "Write this down as Markdown...",
    b = "...get this in HTML form"
  ) |>
  tab_options(
    table.width = pct(100),
    quarto.disable_processing = FALSE,
    quarto.use_bootstrap = FALSE
  ) |>
  opt_css(
    css = "
    #md_ref code {
      color: #333333;
    }"
  )
```

The prose portion of **Quarto** (i.e., *not* the R code) is the default text entry type. The R code is run inside code chunks, which are marked off areas (with three backticks: ```) in the document. The schematic below shows what an R code cell looks like and what controls are available in **Quarto**.

![](../appendix-figures/82-starting-with-r/figure-rmarkdown-annotation.png){#fig:rmarkdown-annotation}

Aside from reproducibility, the finished **Quarto** document can be rendered to a self-contained HTML file, to a Word document, to a various presentation types including Powerpoint, or to a PDF file. There are lots of ways to customize what the rendered document will look like (e.g., hiding code for non-technical audiences, adding HTML display elements, etc.), so, the analysis can double as a deliverable report. This will undoubtedly save you time. If ever the input data should change, the report could be run again and updated, usually with minimal (if any) modification. That's one of the features of reproducible reporting.
  
Let's walk through a simple example of how to use **Quarto** in RStudio. You probably don't know any R at this point and that's perfectly fine. The point of this example is to show some of the mechanics of using the interface to run code and generate an HTML report. The main things we'll do in this **Quarto** walkthrough are to fill in the YAML front matter (these are basic rendering instructions), add in two R code chunks (displaying a data summary and showing a plot), and adding Markdown text with basic explanations.

<hr>

![](../appendix-figures/82-starting-with-r/column-rmarkdown_walkthrough_1.png)
**STEP 1**. The first thing to do is create a new **Quarto** document. This is conveniently done through the *New File* dropdown button (top left of IDE). A new **Quarto** document is the third choice from the top.

<hr>

![](../appendix-figures/82-starting-with-r/column-rmarkdown_walkthrough_2.png)

**STEP 2**. You'll be presented with a dialog box and some options. The default option of HTML is what we want for this walkthrough, so hit Enter or the *OK* button. A new, untitled **Quarto** document will appear in the Source pane (the top-left pane).

<hr>

![](../appendix-figures/82-starting-with-r/column-rmarkdown_walkthrough_3.png)

**STEP 3**. We should delete everything in this default document except for the useful YAML Front Matter (i.e., the text enclosed by three hyphens). Then save the document as an .qmd file. Saving is necessary before rendering and is generally considered a good practice (though RStudio will always keep your unsaved documents across sessions).
  
<hr>

![](../appendix-figures/82-starting-with-r/column-rmarkdown_walkthrough_4.png)

**STEP 4**. Now, place the insertion point in the document below the YAML and insert two R code chunks. This can be done through the *Insert Code Chunk* button or the handy keyboard shortcut `Command` + `Option` + `I` (`Control` + `Alt` + `I` on Windows). You'll see two text areas enclosed by backticks and the language of the code in curly braces: `{r}`.

<hr>

![](../appendix-figures/82-starting-with-r/column-rmarkdown_walkthrough_5.png)

**STEP 5**. Now we can do some writing of code. Place the insertion point inside the first R code chunk and type `summary(airquality)` (this is a built-in R dataset and is always available). Then, run the code in that chunk by pressing the green run button, or, with the keyboard shortcut: `Control` + `Enter`. You'll see a summary of data appear below! Running the code and verifying the output matches expectations is a great practice (although running each code chunk is not necessary for rendering the **Quarto** document). We'll do something similar in the second code chunk. First type in this plotting code.

```{r eval=FALSE}
plot(x = airquality$Temp, y = airquality$Ozone)
```

After running this code chunk, we'll see a plot showing the effect of temperature on ground level ozone concentrations (conveniently right below the code chunk).

<hr>

![](../appendix-figures/82-starting-with-r/column-rmarkdown_walkthrough_6.png)

**STEP 6**. To make this document function as a report, let's add some text above and below the R code chunks. Here is the Markdown text that could be put in above:

```
The `airquality` dataset contains a sample of air quality measurements in New York, May to September 1973. The data were obtained from the *New York State Department of Conservation* (ozone data) and the *National Weather Service* (meteorological data). The following is a summary of the dataset and a plot of **ozone** (in *ppb*) vs. maximum daily temperature (in degrees Fahrenheit).
```

The Markdown text for below the code chunk can be:

```
For more information on this dataset, use `help(airquality)` in the R console.
```

Inside the IDE, this just looks like plaintext with some highlighting applied when using asterisks or other Markdown elements. Let's render the document by pressing the *Render* button that is on the toolbar.

<hr>

That will produce an HTML document with the same name as the **Quarto** document (in the directory where the .qmd file was saved) and the process opens a preview window with the HTML report.

![The rendered HTML document based on the **Quarto** document. The preview window provides a way to easily look over the output initiated by a *Render*.](../appendix-figures/82-starting-with-r/figure-rmarkdown-html-output.png){#fig:rmarkdown-html-output}

It's here where you can see that the Markdown elements become things like bold and italicized text. That rendered text appears above and below the code and the outputs, just as it was in the **Quarto** document. It's also here where its more apparent that **Quarto** is indeed useful for working with data and also for creating reports.

## What is Quarto?

Quarto is open-source software that helps you develop your code and ideas in one reproducible document. It is designed for anyone who uses code to work with data. You can use Quarto at any stage of an analysis project, any time you want to develop code and ideas alongside each other.

Start a Quarto project if you want to:

::: {layout="[60,-5,35]"}
-   Save, execute, and explain your code, all in the same place. Develop your code and ideas in one reproducible document.

-   Transform your code into polished and professional data products---reports, dashboards, websites, slides, even books. Knit plots, tables, and results together with narrative text, and create analyses ready to be shared.

![A crafty hedgehog knitting a sock, art by Allison Horst](img/hedgehog.png)
:::

## What is a `.qmd` file?

::: {layout="[50,50]"}
::: column
Every Quarto project starts with a Quarto file that has the extension `.qmd`.\
\
This particular one analyzes children's early words, but every `.qmd` includes the same three basic elements inside:\

-   A block of metadata at the top, between two fences of `---`s. This is written in [YAML](https://learnxinyminutes.com/docs/yaml/).
-   Narrative text, written in [Markdown](https://commonmark.org/help/tutorial/).
-   Code chunks in gray between two fences of ```` ``` ````, written with R or another programming language.

You can use all three elements to develop your code and ideas in one reproducible document.
:::

![](img/01-source.png)
:::

## How do I create a `.qmd` file?

Here is the plain text version of the same `.qmd` document, which you can copy and paste into a new document:

```{verbatim, file="fragments/doc.qmd"}
```

**Quarto** helps you create dynamic documents that combine code, rendered output (such as figures), and markdown-formatted text. It was developed by software engineers at Posit, so it works well with the **RStudio** IDE, which is our IDE of choice for using **Quarto** with code written in R.

In the rest of this primer, we'll focus on using **Quarto** to create `.qmd` documents that integrate narrative text, code, and its output. While **Quarto** allows for many different kinds of output, we will use HTML documents. But the possibilities are endless 😃 In fact, this book was also written in **Quarto**, and its full source is publicly available in the GitHub repository: <https://github.com/dspatterns/dspatterns-book>.
