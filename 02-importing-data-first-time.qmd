# Importing data for the first time

```{r setup, include=FALSE, echo=FALSE}
library(dspatterns)
library(dplyr)
library(readxl)
library(readr)
library(janitor)
```

## Introduction

In this chapter we'll get down and dirty with some messy (but important to use) data. We need to use this data and although we acknowledge the data is dirty, we can use a smorgasbord of strategies to overcome this.

First, we'll explore the data and find out what went wrong during the import phase. This will be a treasure hunt of sorts. Functions like `glimpse()`, `count()`, `head()`, `tail()`, and `get_dupes()` will be used during the first inspection. This will inevitably be a messy `.qmd` file but you'll leave it behind in your dust when you're finally able to diagnose all of the issues. (We recommend you save the file for later use and we'll provide a tip or two on how to organize these scratch files.)

## Explore

Getting new data can be really exciting but it can often result in a lot of work. You have to import the data such that it's not a garbled mess, you have to understand how the data is organized, and, you may have to do some cleaning and data quality tasks. The first few times you do this can be an exercise in frustration, involving much messing around until you feel you have a handle on things. That said, the goal of this chapter is to provide you with some workflows and many tips/tricks that'll serve you well when onboarding new datasets.

We'll be working with an Excel file called `stickers.xlsx` in this chapter. The dataset has a lot to do with sharing stickers and it's a really interesting one. The problem is that the data in its Excel form is a bit problematic (lots of messiness to overcome).

Let's read in the file with the readxl package (with the `read_excel()` function) and have a first look at the data table.

```{r, paged.print=FALSE}
readxl::read_excel("stickers.xlsx")
```

Okay, a few things stick out as being non-ideal. First, we seem to have an extra 'header' row that got into the table rows (as row 1). It contains notes and remarks about data encoding. We don't want that, so let's use the `skip` option inside `readxl::read_excel()`:

```{r, paged.print=FALSE}
read_excel("stickers.xlsx", skip = 1)
```

That is actually no better. The problem is that `skip` will skip the number of rows *above* the header and what we actually have is a row of notes *between* the header and the actual data that needs to be skipped. We could try again with another `read_excel()` option like `range` but it might be more pragmatic to slice the data and move on. Let's make use of **dplyr**'s `slice()` function with `-1`, which will remove the first (bad) row.

```{r, paged.print=FALSE}
stickers <- 
  read_excel("stickers.xlsx") %>%
  slice(-1)

stickers
```

Let's clean these terrifying names with **janitor**'s world-beating `clean_names()` function:

```{r, paged.print=FALSE}
stickers <- clean_names(stickers)

stickers
```

We still have an outrageously long column name (`absolutenumberofstickersgiven_conditions1or3_outof12_conditions2or4_outof30`) and having that is not great for readability. Let's rename that and, while we're at it, rename quite a few other columns. We'll do this with **dplyr**'s `rename()` function. Like this:

```{r, paged.print=FALSE}
stickers <- 
  stickers %>%
  dplyr::rename(
    subject = subject_number,
    stickers_n = number_stickers,
    env_n = number_envelopes,
    age_months = agemonths,
    age_years = ageyears,
    age_groups = agegroups,
    subjects_env = subjects_envelope,
    l_env = left_envelope,
    r_env = right_envelope,
    stickers_given = absolutenumberofstickersgiven_conditions1or3_outof12_conditions2or4_outof30,
    pct_given = percent_given_outof100percent,
    given = giveornot,
    l_env_n = larger_envelopeabs,
    s_env_n = smaller_envelopeabs,
    l_env_pct = large_envelopepercent,
    s_env_pct = small_envelopepercent
  )

stickers
```

Having long and descriptive column names is not really desirable in a data table. It's much better to have short fragments rendered in snake case (aim for less than 10 letters, if possible).

::: callout-tip
## What's the deal with snake_case?

There are a number of ways to write out variables and column names. Why do it in `snake_case`? It's easy to parse the words/symbols of a variable this way.
:::

We need to acknowledge and accept our paranoia about data quality. It'll result in better work! And, let's constructively turn that paranoia into data validation checks.

If you did this all in a `.qmd` file (recommended) we suggest that it be saved to location with other scratch files. You're in a Project, right? Make a sub-folder called `data-raw` and put it in there along with the raw data files themselves.

Let's write the cleaned up tibble to a file for later use. Make a sub-folder called `data` and write a CSV using `write_csv()` from the **readr** package.

```{r eval=FALSE}
write_csv(stickers, file = "stickers.csv")
```

## Understand

Now that we just finished some radical surgery on `stickers`, here's a question: did the fixing up solve the problem? Let's import the data from a `.qmd` that just contains the importing directives.

Now that we have data in fairly reasonable shape it's a great idea to put together a data dictionary. It's documentation that will help us understand the data, now and especially for later on.

We can do this easily with the **pointblank** package and its functions for building up a data dictionary. We do this with an *informant* object and that's created with the `create_informant()` function. Give it the `stickers` table and

```{r eval=FALSE}
stickers_dd <-
  pointblank::create_informant(tbl = stickers) %>%
  pointblank::info_columns("subject",
    info = "The ID number for the subject."
  ) %>%
  pointblank::info_columns("condition",
    info = "Code from 1 to 4, where 1 = 12:1; 2 = 12:2, 3 = 30:1, 4 = 30:2."
  ) %>%
  pointblank::info_columns("stickers_n",
    info = "Code where 1 = 12; 2 = 30."
  ) %>%
  pointblank::info_columns("env_n",
    info = "Code where 1 = 1 recipient; 2 = 2 recipients."
  ) %>%
  pointblank::info_columns("gender",
    info = "Code from 1 = female and 2 = male."
  ) %>%
  pointblank::info_columns("age_months",
    info = "The age of the subject in months."
  ) %>%
  pointblank::info_columns("age_years",
    info = "The age of the subject in years."
  ) %>%
  pointblank::info_columns("age_groups",
    info = "Code from 1 to 4 where 1 = 3-4yrs; 2 = 5-6yrs; 3 = 7-8yrs; 4 = 9-11yrs."
  ) %>%
  pointblank::info_columns("subjects_env",
    info = "How many stickers did the child keep for themselves."
  ) %>%
  pointblank::info_columns("l_env",
    info = "How many stickers the subject put in the recipient's envelope to their left."
  ) %>%
  pointblank::info_columns("r_env",
    info = "How many stickers the subject put in the recipient's envelope to their right."
  ) %>%
  pointblank::info_columns("stickers_given",
    info = "The number of stickers the subject placed in the recipient(s) envelope(s)."
  ) %>%
  pointblank::info_columns("pct_given",
    info = "The proportion of stickers the subject placed in the recipient(s) envelope(s)."
  ) %>%
  pointblank::info_columns("given",
    info = "Did the subject give any stickers at all? It's 0 for FALSE and 1 for TRUE."
  ) %>%
  pointblank::info_columns("l_env_n",
    info = "The larger value of `l_env` and `r_env`."
  ) %>%
  pointblank::info_columns("l_env_pct",
    info = "The fraction of `l_env_n` and `stickers_given`."
  ) %>%
  pointblank::info_columns("s_env_n",
    info = "The smaller value of `l_env` and `r_env`."
  ) %>%
  pointblank::info_columns("s_env_pct",
    info = "The fraction of `s_env_n` and `stickers_given`."
  )

stickers_dd
```

![A data dictionary for the `stickers` dataset.](figures/02-importing-data-first-time/stickers_dd.png){#fig:stickers-data-dictionary}

## Explain

We got to make sure this can be done again. Let's take stock of what was done here.

Never, ever edit the raw data file.

We can annotate the `.qmd` file with WHATEVER WE WANT. We can make a child doc where all the text will be hidden but the code will run.

A good practice is to include data validation statements after importing. Who knows, maybe the raw data will change and having the checks in place will catch a data error that crept in during the data update. This is something we can do with **pointblank** within a `.qmd` file.

## Share

We can build upon the pointblank data dictionary we made earlier. It's both great for you as an aid in understanding the data, and, others will certainly appreciate it as well! It can either serve as a conversation starter or a valuable reference that will be used again and again. Let's extend that file with more sections. Then, we can publish it or save the reporting as HTML.

Sometimes, you need to have difficult conversations with data providers. Sometimes they are great (i.e., they provide you with data) and other times they can ruin your life (i.e., they provide you with *bad* data).

Let's build a `.qmd` parent that uses a child `.qmd`. It's smart and we can break `.qmd`s down to components, if you will.

## DIY

It's now time to Do It Yourself. We'll recommend some dataset, give you some project ideas, steer you in the right direction, and you'll make something to be proud of.
