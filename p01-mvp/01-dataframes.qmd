# Dataframes

tibbles too
tables too

We haven't covered importing, but a foundational concept when working with small datasets in R are dataframes.

## Explore

- head / tail / View() / names() / dim() / summary()
- https://milesmcbain.github.io/datapasta/ (e.g. https://en.wikipedia.org/wiki/The_Great_British_Bake_Off_(series_1)#Bakers)

## Understand

- glimpse() / skimr::skim()

## Explain

- gt_preview()
- tibble package (as_tibble() )

## Share

Creating your own tabular data can be really useful to share with another person, especially when de-bugging.

The tables we often work with are called tibbles. **R** has a table type called a data frame and a tibble is a special implementation of a data frame that prints its data differently and behaves in a more consistent manner than data frames.

It's very useful to learn how to make our own tibbles from scratch. Although we customarily get our data from other sources (e.g., CSV files, database tables, **Excel** files, etc.), there are a few good reasons for wanting to handcraft our own tibble objects:

1. To have simple tables for experimentation with functions that operate on tabular data
2. To reduce the need to use **Excel** or some other data entry systems (for small enough data)
3. To create small tables that interface with larger tables (e.g., joining, combining, etc.)
4. To gain a better understanding how tibbles work under the hood

We can create tibbles in a few different ways but let's focus on tibble construction using either of two functions available in the **dplyr** package: `tibble()` and the similarly-named `tribble()`.

### Creating Tibbles with the `tibble()` Function

Let's have a look at a few examples of tibble-making first with `tibble()`, which takes in named vectors as arguments. In the following example, we use two equal-length vectors (called `a` and `b`).

`r dspatterns::code_hints(
"Using ~~tibble()~~ with equal-length vectors to make a tibble.",
c(
"#A This will become column ~~a~~.",
"#B This is to be column ~~b~~."
))`
```{r tibble-all-n, paged.print=FALSE}
tibble( 
  a = c(3, 5, 2, 6),  #A
  b = c("a", "b", "g", "b")  #B
)
```

As can be seen, the type of each column is based on the type of the vector. The order of columns in the output table is based on the order of the names provided inside `tibble()`.

Let's make another tibble in a similar manner, but with a single value for `a` (the value `3` will be repeated down its column).

`r dspatterns::code_hints(
"Using ~~tibble()~~ with two vectors: one of length 1 and the other of length 4.",
c(
"#A Only one value for ~~a~~! That's okay, it will be repeated.",
"#B This will become column ~~b~~, a column of ~~character~~-based values."
))`
```{r tibble-n-1, paged.print=FALSE}
tibble(
  a = 3,  #A
  b = c("a", "b", "g", "b")  #B
)
```

In the printed tibble the value `3` in column `a` is indeed repeated down.

The key is to provide either *n*-length (*n* here signifies the total number of rows in the table) or some combination of *n*-length and length-1 vectors. The length-1 value will be repeated down. Any vector with a length between 1 and *n* will result in an error.

We can also pass in `NA` (missing) values by including `NA`s in the appropriate vector. In the next example, we incorporate `NA` values in the two *n*-length vectors.

`r dspatterns::code_hints(
" Using ~~tibble()~~ with two vectors that contain ~~NA~~ values.",
c(
"#A We intentionally placed an ~~NA~~ value among other values in column ~~a~~.",
"#B There is also an ~~NA~~ value in the b column."
))`
```{r tibble-na-vals, paged.print=FALSE}
tibble(
  a = c(3, 5, 2, NA),  #A
  b = c("a", NA, "g", "b")  #B
  )
```

The resulting tibble here shows that those `NA` values in the `numeric` and `character` input vectors appear in the output tibble in their expected locations.

In the next code listing, an `NA` value is used in a vector of length 1. What will happen? Will the `NA` values be repeated down in the column? Let's have a look.

`r dspatterns::code_hints(
" Using a single-length vector with an ~~NA~~ value in ~~tibble()~~.",
c(
"#A Using a single ~~NA~~ (and nothing else) gives us a certain type of ~~NA~~: a ~~logical~~ ~~NA~~ (yes, there are different types)."
))`
```{r tibble-na-col, paged.print=FALSE}
tibble(
  a = NA,  #A
  b = c("a", "b", "g", "b")
)
```

#A Using a single ~~NA~~ (and nothing else) gives us a certain type of ~~NA~~: a ~~logical~~ ~~NA~~ (yes, there are different types).

Yes. The `NA` is repeated down the `a` column. We can see that column `a`'s type is `<lgl>`, or, `logical`.

Using just `NA` in a column does result in repeated `NA`s, however, the column is classified as a logical column (which is meant for `TRUE` or `FALSE` values, likely not was intended). If we want this column to be a `character` column, we should use a specific type of `NA`: `NA_character_`. (There are other missing value constants for other types: `NA_real_`, `NA_integer_`, and `NA_complex_`.) Let's replace `a = NA` with `a = NA_character_`:

`r dspatterns::code_hints(
"Using a single-length vector with an ~~NA_character_~~ value in ~~tibble()~~.",
c(
"#A We are now being specific about the type of ~~NA~~s we want (the ~~character~~ version)."
))`
```{r tibble-na-character, paged.print=FALSE}
tibble(
  a = NA_character_,  #A
  b = c("a", "b", "g", "b")
)
```

And we get a column type of `<chr>` for `a`, which is what we wanted.

### Creating Tibbles a Different Way with the `tribble()` Function

We can use the `tribble()` function as an alternative constructor for tibble objects. This next example with `tribble()` reproduces a tibble generated in a previous code listing:

`r dspatterns::code_hints(
"Creating a tibble using the ~~tribble()~~ function.",
c(
"#A As ~~tribble()~~ is very close in spelling to ~~tibble()~~, be a little careful here.",
"#B The column names are prepended by the tilde character, and we don't use quotes.",
"#C The last (hanging) comma here is fine to keep. It won't result in an error."
))`
```{r tribble-use, paged.print=FALSE}
tribble(    #A
  ~a, ~b,   #B
  3,  "a",
  5,  "b",
  2,  "g",
  6,  "b",  #C
)
```

The resulting tibble appears just as we laid out the values. As can be seen in the code listing, the table values aren't provided as vectors but instead are laid out as column names and values in manner that approximates the structure of a table. Importantly the column names are preceded by a tilde (`~`) character, and, commas separate all values. This way of building a simple tibble can be useful when having values side-by-side is important for minimizing the potential for error.

