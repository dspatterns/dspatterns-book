---
title: "Introduction to Data Frames and Tibbles"
---

{{< include ../_patterns.qmd >}}

```{r setup, include=FALSE, echo=FALSE}
library(dspatterns)
library(dplyr)
library(tibble)
library(bakeoff)
library(skimr)
library(gt)
```

This section covers

- printing a dataset obtained from a package with the object name and with `print()`, `head()`, and **dplyr**'s `glimpse()`
- using the `names()` and `dim()` functions to get the column names and the dimensions of a table
- looking at a full dataset with `View()` and the head and tail with **gt**'s `gt_preview()` function  
- using `summary()` to get a basic summary of a table, and, going further with **skimr**'s `skim()` more comprehensive summary
- creating our own tables/tibbles with `tibble()` and `tribble()`

When you're working with data, quite often it'll be structured data in the form of tables. Tabular data is usually a joy to work with: there's regularity in its shape (rectangular!), the rules for working with tables are widely known, and we can also take proactive steps to shape the data in a way that's even more convenient for data analysis.

Tables come in all shapes and sizes. Some are very small, filling maybe a screen or two with data. Some are in between, requiring querying and summarizing to really make sense of the data. Finally, some are huge and those require more efficient tools for transforming, querying, and summarizing the data. Here, we'll start small and learn how to explore tables of the small variety. In **R**, tabular data is often stored in data structures known as data frames. It's part of *base R* and you don't need any extra packages to use data frames.

We also have another variety of tables which are called *tibbles*. A tibble is a special implementation of a data frame that prints its data differently and behaves in a more consistent manner than data frames.

In this chapter we'll take a look at a number of great ways to work with tables (whether they are data frames or tibbles). It's really hard to read all of the data in a large table so we can make use of many functions that provide different views of a table of interest. We will explore a handful of different packages that expressly deal with data frame exploration and summarization for better understanding.

## Several Quick Ways to Initially Explore a Dataset

Let's look at some data from `episodes` dataset in the **dspatterns** package. It serves as a highly quantitative episode guide. Before we start, we'll load in the necessary packages, namely the **tidyverse** and **dspatterns** packages (the latter will load the **bakeoff** package, and that's where the dataset originates).

`r dspatterns::code_hints(
"Loading the **tidyverse** and **dspatterns** packages.",
c(
"L.1 Loading the **tidyverse** package like this actually auto-loads all core **tidyverse** packages (this is almost everything we'll need for most analyses!).",
"L.2 The **dspatterns** package is this book's namesake package. It has the datasets we need for all of the examples."
))`
```{r}
#| label: load-tidyverse-dspatterns
#| class-output: "html sourceCode"
#| eval: false
library(tidyverse)
library(dspatterns)
```

Now let's look at the `episodes` dataset by printing it out:

```{r}
#| label: print-episodes
#| class-output: "html sourceCode"
#| paged.print: false

episodes
```

It provides a lot of information, but, it doesn't overload the console with tons of information. Because the **tidyverse** packages are loaded, the *tibble* version of the dataset is what's provided during printing. At any rate we can see some of the data (10 rows), the dimensions of the table (`94` rows by `10` columns), and, a useful tip to use `print(n = ...)` to see more rows. Let's try that:

```{r}
#| label: use-of-print-fn
#| class-output: "html sourceCode"
#| paged.print: false

print(episodes, n = 20)
```

Being able to print an exact number of rows with `print()` is sometimes useful if you have a generally small table and you need to see more of it.

::: callout-warning

When using `print()` to specify the number of rows displayed, we have to be sure that the table object is a tibble. This won't work with data frames and using `print(mtcars, n = 5)`
:::

If you wanted just a few rows, you could use the `head()` function like this:

```{r}
#| label: use-of-head-fn
#| class-output: "html sourceCode"
#| paged.print: false

head(episodes)
```

If you wanted smaller, more focused output on what's in the table then the `names()` and `dim()` functions will yield vectors of column names and the dimensions of the table.

```{r}
#| label: use-of-names-fn
#| class-output: "html sourceCode"

names(episodes)
```

```{r}
#| label: use-of-dim-fn
#| class-output: "html sourceCode"

dim(episodes)
```

Take note that the convention for table dimensions in **R** is first the number of rows (`94`) and then the number of variables or columns (`10`). If you're using the RStudio IDE, then the special `View()` function will put a table into a spreadsheet-like view:

```{r}
#| label: use-of-view-fn
#| class-output: "html sourceCode"
#| eval: false

View(episodes)
```

Please note that if you're using Quarto or R Markdown, having `View()` in a chunk is generally not a good idea if you're intending on rendering the document for distribution (since the effect of `View()` is to provide a secondary 'view' of your data). It's best to use it in only an interactive context.

Sometimes you may want to see just a small portion of your input data. We can use `gt_preview()` from the **gt** package to get the first *x* rows of data and the last *y* rows of data (these parameters can be set by the `top_n` and `bottom_n` arguments of `gt_preview()`). Let's try it with the `bakers` dataset.

```{r}
#| label: gt-preview
#| class-output: "html sourceCode"
#| results: hide

gt_preview(bakers)
```
```{r}
#| label: gt-preview-output
#| class-output: "html sourceCode"
#| echo: false

as_raw_html(gt_preview(bakers))
```

What you get by default is the first five rows and the last row of the `bakers` dataset. We can see that what's not shown are rows 6 to 119 (it's shown as `6..119` in the table *stub*).

If you wanted to show the first and last 10 rows of the `bakers` dataset, that's not a problem. It can be accomplished with the `top_n` and `bottom_n` arguments, like this:

```{r}
#| label: gt-preview-more-rows
#| class-output: "html sourceCode"
#| results: hide

gt_preview(bakers, top_n = 10, bottom_n = 10)
```
```{r}
#| label: gt-preview-more-rows-output
#| class-output: "html sourceCode"
#| echo: false

as_raw_html(gt_preview(bakers, top_n = 10, bottom_n = 10))
```

It's a relatively simple function that `gt_preview()`, but it comes in handy if you want a nicer display of the head and tail of a dataset.

## Using `glimpse()` to Go Sideways

While inspecting rows of your raw data isn't always the best thing it could be useful for quickly understanding how the different variables fit together. The `glimpse()` function (accessible from the **dplyr** package) allows you to have a look at the first few records of a dataset. This is somewhat like the `head()` function seen earlier but turned sideways:

```{r}
#| label: use-of-glimpse-fn
#| class-output: "html sourceCode"

glimpse(episodes)
```

Unlike the tibble view (with `head()` or not), you get to see all of the columns in the data table. The interesting thing about `glimpse()` is that it invisibly returns the data that's given to it. Because of that, you can have safely have one or several `glimpse()` calls in a data transformation pipeline and each of those will print the state of the data at different junctures.

```{r}
#| label: use-of-multiple-glimpse-in-pipeline
#| class-output: "html sourceCode"

episodes |>
  glimpse() |>
  select(series, episode, winner_name) |>
  filter(!is.na(winner_name)) |>
  glimpse()
```

As can be seen above, the original dataset was printed with `glimpse()` and it was also passed to `select()` and `filter()` statements just before a final glimpse call (to see the transformed data). The output is two `glimpse()` outputs stacked atop each other.

## Getting Data Summaries

Something else that's very useful during the *exploration* phase of data work is the `summary()` function. It'll break down each column of data into their own summaries.

```{r}
#| label: use-of-summary-fn
#| class-output: "html sourceCode"

summary(episodes)
```

For columns that are numeric, the `summary()` function automatically calculates the following summary statistics for each column of the table:

- `Min`: The minimum value
- `1st Qu`: The first quartile value (25th percentile)
- `Median`: The median value
- `3rd Qu`: The third quartile value (75th percentile)
- `Max`: The maximum value

There are a few `character` columns in the `episodes` dataset (e.g., `sb_name`, etc.) and `summary()` doesn't do much with those other than state that they are indeed of the `character` class. If there were to be any `NA` values, `summary()` would report how many on a column-by-column basis. 

For a more comprehensive look at a dataset, the `skim()` function from the **skimr** package offers a report that is broken down by variable type. Using `skim()` with the `episodes` dataset from **bakeoff** will give us an overall data summary, information for the `character` variables (`sb_name`, `winner_name`, and `eliminated`) such as `n_missing`, `complete_rate`, and, summary statistics for the `numeric` variables.

```{r}
#| label: skim-episodes
#| class-output: "html sourceCode"
#| paged.print: false
#| results: hide

skim(episodes)
```

```
── Data Summary ────────────────────────
                           Values  
Name                       episodes
Number of rows             94      
Number of columns          10      
_______________________            
Column type frequency:             
  character                3       
  numeric                  7       
________________________           
Group variables            None    

── Variable type: character ───────────────────────────────────────────────────────
  skim_variable n_missing complete_rate min max empty n_unique whitespace
1 sb_name              16         0.830   3  12     0       47          0
2 winner_name          84         0.106   3   7     0       10          0
3 eliminated           13         0.862   3  16     0       76          0

── Variable type: numeric ─────────────────────────────────────────────────────────
  skim_variable     n_missing complete_rate  mean    sd p0  p25 p50 p75 p100 hist 
1 series                    0             1 5.77  2.77   1 3.25 6     8   10 ▆▇▇▇▇
2 episode                   0             1 5.29  2.83   1 3    5     8   10 ▇▇▇▇▆
3 bakers_appeared           0             1 7.55  2.97   3 5    7    10   13 ▇▅▅▅▃
4 bakers_out                0             1 0.947 0.472  0 1    1     1    2 ▂▁▇▁▁
5 bakers_remaining          0             1 6.61  2.80   3 4    6.5   9   12 ▇▅▅▅▃
6 star_bakers               0             1 0.840 0.396  0 1    1     1    2 ▂▁▇▁▁
7 technical_winners         0             1 0.989 0.103  0 1    1     1    1 ▁▁▁▁▇
```

The numeric variable types really get the deluxe treatment here with a statistical summary consisting of the mean, the standard deviation (`sd`), percentile values, and little histograms! It doesn't take very long at all to get such a summary so it's worth it every time for new and unfamiliar datasets.


## Rolling Our Own Tabular Data

Creating your own tabular data can be really useful for sharing (especially when you need to create a particular one for debugging something) and for having a table of manageable size for learning purposes. To that end, we'll learn how to make our own tibbles from scratch. Although we customarily get our data from other sources (e.g., CSV files, database tables, **Excel** files, etc.), there are a few good reasons for wanting to handcraft our own tibble objects:

1. To have simple tables for experimentation with functions that operate on tabular data
2. To reduce the need to use **Excel** or some other data entry systems (for small enough data)
3. To create small tables that interface with larger tables (e.g., joining, combining, etc.)
4. To gain a better understanding how tibbles work under the hood

We can create tibbles in a few different ways but let's focus on tibble construction using either of two functions available in the **dplyr** package: `tibble()` and the similarly-named `tribble()`.

### Creating Tibbles with the `tibble()` Function

Let's have a look at a few examples of tibble-making first with `tibble()`, which takes in named vectors as arguments. In the following example, we use two equal-length vectors (called `a` and `b`).

`r dspatterns::code_hints(
"Using ~~tibble()~~ with equal-length vectors to make a tibble.",
c(
"L.2 This will become column ~~a~~.",
"L.3 This is to be column ~~b~~."
))`
```{r}
#| label: tibble-all-n
#| class-output: "html sourceCode"
#| paged.print: false

tibble( 
  a = c(3, 5, 2, 6),
  b = c("a", "b", "g", "b")
)
```

As can be seen, the type of each column is based on the type of the vector. The order of columns in the output table is based on the order of the names provided inside `tibble()`.

Let's make another tibble in a similar manner, but with a single value for `a` (the value `3` will be repeated down its column).

`r dspatterns::code_hints(
"Using ~~tibble()~~ with two vectors: one of length 1 and the other of length 4.",
c(
"L.2 Only one value for ~~a~~! That's okay, it will be repeated.",
"L.3 This will become column ~~b~~, a column of ~~character~~-based values."
))`
```{r}
#| label: tibble-n-1
#| class-output: "html sourceCode"
#| paged.print: false

tibble(
  a = 3,
  b = c("a", "b", "g", "b")
)
```

In the printed tibble the value `3` in column `a` is indeed repeated down.

The key is to provide either *n*-length (*n* here signifies the total number of rows in the table) or some combination of *n*-length and length-1 vectors. The length-1 value will be repeated down. Any vector with a length between 1 and *n* will result in an error.

We can also pass in `NA` (missing) values by including `NA`s in the appropriate vector. In the next example, we incorporate `NA` values in the two *n*-length vectors.

`r dspatterns::code_hints(
" Using ~~tibble()~~ with two vectors that contain ~~NA~~ values.",
c(
"L.2 We intentionally placed an ~~NA~~ value among other values in column ~~a~~.",
"L.3 There is also an ~~NA~~ value in the b column."
))`
```{r}
#| label: tibble-na-vals
#| class-output: "html sourceCode"
#| paged.print: false

tibble(
  a = c(3, 5, 2, NA),
  b = c("a", NA, "g", "b")
  )
```

The resulting tibble here shows that those `NA` values in the `numeric` and `character` input vectors appear in the output tibble in their expected locations.

In the next code listing, an `NA` value is used in a vector of length 1. What will happen? Will the `NA` values be repeated down in the column? Let's have a look.

`r dspatterns::code_hints(
" Using a single-length vector with an ~~NA~~ value in ~~tibble()~~.",
c(
"L.2 Using a single ~~NA~~ (and nothing else) gives us a certain type of ~~NA~~: a ~~logical~~ ~~NA~~ (yes, there are different types)."
))`
```{r}
#| label: tibble-na-col
#| class-output: "html sourceCode"
#| paged.print: false

tibble(
  a = NA,
  b = c("a", "b", "g", "b")
)
```

Yes. The `NA` is repeated down the `a` column. We can see that column `a`'s type is `<lgl>`, or, `logical`.

Using just `NA` in a column does result in repeated `NA`s, however, the column is classified as a logical column (which is meant for `TRUE` or `FALSE` values, likely not was intended). If we want this column to be a `character` column, we should use a specific type of `NA`: `NA_character_`. (There are other missing value constants for other types: `NA_real_`, `NA_integer_`, and `NA_complex_`.) Let's replace `a = NA` with `a = NA_character_`:

`r dspatterns::code_hints(
"Using a single-length vector with an ~~NA_character_~~ value in ~~tibble()~~.",
c(
"L.2 We are now being specific about the type of ~~NA~~s we want (the ~~character~~ version)."
))`
```{r}
#| label: tibble-na-character
#| class-output: "html sourceCode"
#| paged.print: false

tibble(
  a = NA_character_,
  b = c("a", "b", "g", "b")
)
```

And we get a column type of `<chr>` for `a`, which is what we wanted.

### Creating Tibbles a Different Way with the `tribble()` Function

We can use the `tribble()` function as an alternative constructor for tibble objects. This next example with `tribble()` reproduces a tibble generated in a previous code listing:

`r dspatterns::code_hints(
"Creating a tibble using the ~~tribble()~~ function.",
c(
"L.1 As ~~tribble()~~ is very close in spelling to ~~tibble()~~, be a little careful here.",
"L.2 The column names are prepended by the tilde character, and we don't use quotes.",
"L.6 The last (hanging) comma here is fine to keep. It won't result in an error."
))`
```{r}
#| label: tribble-use
#| class-output: "html sourceCode"
#| paged.print: false

tribble(
  ~a, ~b,
  3,  "a",
  5,  "b",
  2,  "g",
  6,  "b",
)
```

The resulting tibble appears just as we laid out the values. As can be seen in the code listing, the table values aren't provided as vectors but instead are laid out as column names and values in manner that approximates the structure of a table. Importantly the column names are preceded by a tilde (`~`) character, and, commas separate all values. This way of building a simple tibble can be useful when having values side-by-side is important for minimizing the potential for error.
