---
title: "Rolling Up Data"
---

{{< include ../_patterns.qmd >}}

```{r setup, include=FALSE, echo=FALSE}
library(dspatterns)
library(intendo)
library(dplyr)
library(lubridate)
library(gt)
library(ggplot2)
```

Sometimes you have a lot of data. I'm talking many, *many*, rows. In data analysis, summarizing large amounts of data is crucial. It's a commonly use pattern, and this is not a joke. The pattern involves distilling vast quantities of information into shorter representations. Why do this? To make it easier to uncover insights and to draw conclusions. Summaries save time! Communication with summaries is more expressive. Summarized material makes it easier to identify outliers or unexpected patterns.

We'll make extensive use of the `summarize()` function in **dplyr** to generate summarized tables (from larger tables). And we'll use some larger datasets available in the packages you know and love. Here's what we'll be using:

- **tidyverse**: to use the **dplyr**, **ggplot**, and **lubridate** packages
- **gt**: for making summary tables in a more presentable fashion
- **intendo**: for the dataset we'll be using (`users_daily`)

## Explore

Let's obtain some interesting data from the **intendo** package. If you don't already know this package, it contains datasets that deal with activity and revenue from a (non-real) online game. The dataset we want for the forthcoming examples is `users_daily`. We can get it through use of the `users_daily()` function.

```{r}
#| output: false
#| echo: false
users_daily <- users_daily()
```

Let's take a look at the `users_daily` tibble by printing it out:

```{r, paged.print=FALSE}
users_daily
```

To start with the summarizing, we'll first get the mean value of `playtime_day` for all users in January 2015. The dataset encompasses the entire 2015 year, so using the `filter()` function is a good strategy to trim down the data. Let's get a value of the mean play time across all users by every day in the one month we're looking at. We do this with a combination of `group_by()` (grouping by `login_date`) and `summarize()` (taking the mean of `playtime_day`).

```{r, paged.print=FALSE}
users_daily_playtime <- 
  users_daily |>
  filter(login_date < "2015-02-01") |>
  group_by(login_date) |>
  summarize(playtime_day = mean(playtime_day))

users_daily_playtime
```

We find that right away it's hard to read a tibble, even for summarized data. Since this is a simple table, we could very well make a line plot using **ggplot**. Using **ggplot** during the exploratory phase is always useful and it doesn't require a lot of code:

```{r}
ggplot(
  users_daily_playtime,
  aes(x = login_date, y = playtime_day)
) +
  geom_line()
```

What this plot tells us is that the average daily playtime across all users in January 2015 is roughly between 30 and 40 minutes. This is interesting but we have a lot more data in `users_daily` that we can use to tease out some even more useful summary info.

Let's get the average `playtime_day` in January 2015, this time creating groups by `country` and getting the number of users in each of these country groups. This is to answer the question: are users from different countries more-or-less equally engaged (or not)?

```{r, paged.print=FALSE}
users_daily |>
  filter(login_date < "2015-02-01") |>
  group_by(country) |>
  summarize(
    n_users = n(),
    mean_playtime_day = mean(playtime_day)
  ) |>
  arrange(desc(n_users))
```

We find from looking at the printing of the summary that we have not very many users. Upon splitting the total set of users in January by `country`, we get less than a hundred per country. Because of these low user counts per group, let's choose to remove the `filter()` statement and use the whole year and re-run the summarizing statements:

```{r, paged.print=FALSE}
users_daily |>
  group_by(country) |>
  summarize(
    n_users = n(),
    mean_playtime_day = mean(playtime_day)
  ) |>
  arrange(desc(n_users))
```

This is better, for now we have thousands of users per group. For users across different countries we find that the average play time per day is about the same: 30 minutes. This in itself is interesting. It does mean that users across these groups are equally engaged (and we did have that question answered).

## Understand

We could now look at other metrics to see if there is some variation that is interesting. Let's look at the IAP (in-app purchase) spend and the quantity of ad views. We'll get `mean()` values again, both for the number of IAPs and ads viewed and the amount of revenue earned from both.

```{r, paged.print=FALSE}
users_daily_summary <-
  users_daily |>
  group_by(country) |>
  summarize(
    n_users = n(),
    mean_playtime_day = mean(playtime_day),
    mean_n_iap_day = mean(n_iap_day),
    mean_n_ads_day = mean(n_ads_day),
    mean_rev_iap_day = mean(rev_iap_day),
    mean_rev_ads_day = mean(rev_ads_day)
  ) |>
  arrange(desc(n_users))

users_daily_summary
```

The table above probably has the information you need but, even though it is summarized, it is very hard to read. It's very much worth making a **gt** table to better present this summary data. You can organize the `country` column values into the table stub. You could format the values so they are easier to read. And you can color code the values within key columns so that it's all much easier to parse.

```{r}
#| html-table-processing: none

users_daily_summary_gt <-
  users_daily_summary |>
  gt(rowname_col = "country") |>
  fmt_integer(columns = n_users) |>
  fmt_number(
    columns = starts_with(c("mean_play", "mean_n")),
    decimals = 1
  ) |>
  fmt_currency(columns = starts_with("mean_rev")) |>
  data_color(
    columns = starts_with("mean_rev"),
    palette = c("white", "green")
  ) |>
  cols_label(
    n_users = "Users",
    mean_playtime_day = "Play Time",
    matches("iap") ~ "IAP",
    matches("ads") ~ "Ads"
  ) |>
  tab_spanner(
    label = md("*N*"),
    columns = starts_with("mean_n")
  ) |>
  tab_spanner(
    label = "Revenue",
    columns = starts_with("mean_rev")
  ) |>
  cols_width(
    stub() ~ px(120),
    everything() ~ px(65)
  )

users_daily_summary_gt
```

Though some may characterize it as prematurely styling a table, it is good to include *as early as possible* things like revised column labels, column spanners, and consistent sizing of columns in a **gt** table. Even though we're not at the sharing stage yet and still understanding the data and the hidden patterns within, basic table improvements through the use of the `fmt_*()` functions, `cols_label()`, `tab_spanner()`, and `cols_width()` do make it easier get an understanding of the data.

From the summary **gt** table we can see that the country has virtually no effect on the average daily play time. However, the average daily revenue from IAP *does* vary according to country; Norway users have an average daily spend of \$48.31 whereas users from India spend an average of \$6.41 daily on in-app purchases. There are also differences in ad revenue across countries, though the revenue gained from ad views is one order of magnitude lower. What's more intriguing is that the average numbers of IAPs and ads are much the same across the users of the different countries. Since ad views have variations in revenue earned and IAPs come in a wide range of price points, it seems that users of different countries tend to spend differently when it comes to IAPs.

## Explain

Once we understood that summaries can be useful for finding out that different countries have differing amounts of IAP spends, we can continue in this way and look for differences using other variables. There are several categorical variables from `users_daily` that could be used in a `group_by()`/`summarize()` pattern. Let's see if the `acquisition` variable has any discernable effect on mean revenue from IAPs per day:

```{r, paged.print=FALSE}
users_daily_summary_by_acquisition <-
  users_daily |>
  group_by(acquisition) |>
  summarize(
    n_users = n(),
    mean_rev_iap_day = mean(rev_iap_day)
  )

users_daily_summary_by_acquisition
```

This summarized table is quite small (6 rows by 3 columns) so we could look it over as is (i.e., no need to re-tabulate in **gt** for better readability). There seems to be two things that stick out:

1. The `"organic"` group (players that came to the game independently of a campaign) is the largest group
2. The `"apple"` group, comprising players that installed as a result of an ad in the App Store, spends the most per day on IAPs

This is pretty useful information! And we can use this to make additional summaries. For instance, it might be good to see if there is a trend in spend for this `acquisition` groups over the 2015 year. We can do that with some manipulation of the `users_daily` table. Essentially, we'll make an additional categorical column (`month`) through mutation of the `login_date` column via the `month()` function from the **lubridate** package.

```{r, paged.print=FALSE}
users_daily_summary_by_acquisition_month <-
  users_daily |>
  mutate(month = lubridate::month(login_date, label = TRUE)) |>
  group_by(month, acquisition) |>
  summarize(
    n_users = n(),
    mean_rev_iap_day = mean(rev_iap_day),
    .groups = "drop"
  )

users_daily_summary_by_acquisition_month
```

We can plot this using **ggplot**. This won't be a line plot since our `mean_rev_iap_day` values belong to a specific `month` and `acquisition`. So instead of `geom_line()` being used, we'll opt for `geom_point()`. The months will be categories on the *x* axis and the mean revenue per day will be put onto the *y* axis. We also need to be able to distinguish the different data points and, to that end, the `acquisition` variable will be assigned to the `color` aesthetic.

```{r}
ggplot(
  users_daily_summary_by_acquisition_month,
  aes(x = month, y = mean_rev_iap_day, color = acquisition)
) +
  geom_point()
```

From the plot we can see that users introduced to the game via the `"apple"` campaign, for eight out of twelve months, had the highest average spend. And for those months, the difference between `"apple"` and the next highest-performing campaign was quite substantial. This additional summary provides useful information for the analyst. It shows how the different campaigns have performed and this information can be used to influence future advertising campaigns (perhaps for the 2016 year).

## Share

The look of the previous plot was good enough to let us understand and even explain the key findings to others. However, if you want to share the plot it could be improved so that those key findings are clearly communicated.

Let's have the following features in the revised **ggplot** plot:

- a title and a subtitle, explaining the purpose and meaning of the plot
- a caption that shows where the plot can be later found (for further inspection)
- removal of the redundant *x*-axis label (it's obvious we are looking at months)
- an improved *y*-axis label and values formatted as currency values
- points sized by the number of users in the grouping
- a somewhat more minimal theme

We can make this all possible. The `labs()` function makes it easy to set the `title`, the `subtitle`, and the `caption`. Here we make the title describe what's in the plot in general terms (`Comparison of IAP Spend by Campaign Type in 2015"`) and the subtitle will have more specific information (`"Aggregate of IAP spend per day (on active days) by campaign type."`). You could even add in some statements that summarize the key findings in the `subtitle`. By using `x = NULL` in `labs()`, we effectively remove the *x*-axis label (which is not really needed here). The *y*-axis label is also given text that is specific and informative. With the `\n` used in the `y` argument, we can add in a line break since the label text is quite long.

The number of users per group is available in the `users_daily_summary_by_acquisition_month` table and we can visualize these values by including the `n_users` variable in the `size` aesthetic. A legend will be added to help readers get a sense of how many users occupy each group. Speaking of legends, we have one for the `acquisition` variable. If we're not happy with the naming of the groups (since they'll appear in the legend), we could use `mutate()` with an `ifelse()` statement and rename specific groups. Here, we've elected to rename `"other_campaign"` to `"other"` so that less room is taken up by the legend.

```{r}
ggplot(
  users_daily_summary_by_acquisition_month |>
    mutate(acquisition = ifelse(
      acquisition == "other_campaign", "other", acquisition)
    ),
  aes(x = month, y = mean_rev_iap_day, color = acquisition, size = n_users)
) +
  geom_point() +
  scale_y_continuous(labels = scales::dollar_format()) +
  labs(
    title = "Comparison of IAP Spend by Campaign Type in 2015",
    subtitle = "Aggregate of IAP spend per day (on active days) by campaign type.",
    caption = "Plot available in the weekly report as 'iap_by_acquisition_month'.",
    x = NULL, y = "Monthly Averaged Mean Daily\nRevenue from IAP Spend"
  ) +
  theme_minimal()
```

We did quite a few things to make the plot better to share with others. Because this plot contains more information encoded in its aesthetics, it makes it easier to explain to other people during presentations or meetings. Further to this, the plot would be easier to understand even if the author is not available to explain it.
