# This workflow works best if you use the `freeze` capability on all of your
# blog posts and render them ahead of time. Then all quarto has to do is convert
# the frozen assets into the site, and push that to Netlify.
#
# This workflow requires that you add two environment variables to your repo.
# You can add these secrets on GitHub by going to your repo and navigating to:
# Settings -> Secrets -> Actions -> New repository secret.
# - NETLIFY_AUTH_TOKEN: Generated on Netlify through User Settings ->
#   Applications -> Personal Access Tokens
# - NETLIFY_SITE_ID: On Netlify, click on your site, then click
#   Site Settings -> General -> Site information -> Site ID
#
# There are 3 notable features of the Netlify action:
# - enable-commit-status: This will create a "check" that links to a deploy
#   preview for a successful commit. This shows up in pull requests and when
#   you commit straight to the main branch. This is likely the most useful
#   feature. Defaults to `true`.
# - enable-pull-request-comment: This will comment on your pull request with a
#   link to a deploy preview. Redundant with `enable-commit-status`.
#   Defaults to `false`.
# - enable-commit-comment: This will comment on your commit with a link to a
#   deploy preview. Redundant with `enable-commit-status` and extremely noisy
#   if you get GitHub notifications. Defaults to `false`.
#
# Note that when the site is deployed within a pull request, it is not
# deployed to "production". Instead, a deploy preview is created. When you
# merge the pull request, a production site will be built.

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # run every day at 11 PM
    - cron: '0 23 * * *'

name: build-book

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # NETLIFY_AUTH_TOKEN and NETLIFY_SITE_ID added in the repo's secrets
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      isExtPR: ${{ github.event.pull_request.head.repo.fork == true }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Install Quarto
        uses: quarto-dev/quarto-actions/install-quarto@v1
        with:
          version: 0.9.504
          # To install LaTeX to build PDF book
          # tinytex: true
          # uncomment below and fill to pin a version

      - name: Print Quarto version
        # Add any command line argument needed
        run: |
          quarto --version

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          # withr
          #  Required by downlit but not listed as a dependency right now
          #  https://github.com/r-lib/downlit/pull/141
          # xml2
          #  Suggested dependency of downlit that is required to run downlit
          #  on HTML files
          # rmarkdown
          #  Required by quarto itself to run the script that calls downlit
          # sessioninfo
          #  For nice lockfile printing in the action
          packages: |
            downlit
            withr
            xml2
            rmarkdown
            tidyverse
            babynames
            dspatterns/dspatterns
            apreshill/bakeoff
            gt
            paletteer
            janitor
            pointblank
            any::sessioninfo
          dependencies: '"hard"'

      # - name: Query dependencies
      #   run: |
      #     install.packages('remotes')
      #     saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
      #   shell: Rscript {0}
      #
      # - name: Install system dependencies
      #   if: runner.os == 'Linux'
      #   env:
      #     RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
      #   run: |
      #     Rscript -e "remotes::install_github('r-hub/sysreqs')"
      #     sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
      #     sudo -s eval "$sysreqs"
      #
      # - name: Install Packages
      #   run: |
      #     install.packages("remotes")
      #     install.packages("jsonlite")
      #     install.packages("htmltools")
      #     install.packages("knitr")
      #     install.packages("rmarkdown")
      #     install.packages("tidyverse")
      #   shell: Rscript {0}

      - name: Render book
        run: |
          quarto render

      - name: Deploy to Netlify
        if: contains(env.isExtPR, 'false')
        id: netlify-deploy
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: 'docs'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message:
            'Deploy from GHA: ${{ github.event.pull_request.title || github.event.head_commit.message }} (${{ github.sha }})'
          # these all default to 'true'
          enable-pull-request-comment: true
          enable-commit-comment: true
          enable-commit-status: true
        timeout-minutes: 1
