# Primer I: Quick Start {.unnumbered}

This primer will lead you through the steps to make a simple plot (maybe your first!) with R, a free and open-source software environment for statistical computing and graphics. You can read more about it here <https://www.r-project.org>.

```{r setup}
#| message: false
library(tidyverse)
library(babynames)
```

Our end goal is to get you looking at a screen like this:

![final screenshot](img/final-screenshot.png)

## Packages

The version of R that you just downloaded is considered base R, which provides you with good but basic statistical computing and graphics powers. For analytical and graphical super-powers, you'll need to install add-on packages, which are user-written, to extend/expand your R capabilities.

R packages can live in one of two places:

-   They may be carefully curated by **CRAN** (<https://cran.r-project.org/>). **CRAN** stands for the "Comprehensive R Archive Network", which involves a thorough submission and review process for R packages. Packages that go through this process and are accepted by CRAN are easy to install from your R console using:

    ``` {{r}}
    install.packages("name_of_package")
    ```

    In your R console, let's install the **remotes** package:

    ``` {{r}}
    install.packages("remotes")
    ```

-   Alternatively, they may be available via GitHub. Sometimes, a package is available in both places. Many R packages use GitHub for development, and submit new versions occasionally to **CRAN**. **CRAN** packages are often considered to be 'stable' versions. Packages from **GitHub** are considered to be the in-development versions.

    To download an R package from GitHub, you first need to install the **remotes** package from **CRAN**, which we just did! Then you can run this code in your R console:

    ``` {{r}}
    library(remotes)                   # load the remotes package
    install_github("username/repo")    # use a function from remotes
    ```

    The `install_github()` statement is a function, and the part in quotes (`"username/repo"`) refers to URL for the R package on GitHub. For example, we made a package for this book that you can find at <https://github.com/dspatterns/dspatterns>. To install that package, run the following code in your R console:

    ``` {{r}}
    library(remotes)                   
    install_github("dspatterns/dspatterns")    
    ```

Place your cursor in the console again (where you last typed `x` and `[4]` printed on the screen). You can use the first method to install the following packages directly from CRAN, all of which we will use:

-   [`dplyr`,](http://dplyr.tidyverse.org)
-   [`ggplot2`,](http://ggplot2.tidyverse.org)
-   [`babynames`](https://github.com/hadley/babynames)

Mind your use of quotes carefully with packages.

-   To *install* a package, you put the name of the package in quotes as in `install.packages("name_of_package")`.
-   To *use* an already installed package, you must load it first, as in `library(name_of_package)`, leaving the name of the package bare. You only need to do this once per RStudio session.
-   If you want the *citation* for a package (and you should give credit where credit is due), ask R as in `citation("name_of_package")`.

``` {{r}}
install.packages("dplyr", dependencies = TRUE)
library(dplyr)
```

```{r}
citation("ggplot2")
```

Two good rules of thumb when working with packages in R:

1.  Install packages once per workstation/machine. Always use the console to `install.packages()`.

2.  Load packages once per work session. Each `library()` call typically goes on its own line when we put our code in an R script or **Quarto** document.

You can download all of these at once, too:

``` {{r}}
install.packages(c("dplyr", "ggplot2", "babynames"), 
                 dependencies = TRUE)
```

::: callout-tip
## Heads up

We should formally introduce the combine command, [`c()`](http://stat.ethz.ch/R-manual/R-patched/library/base/html/c.html), used above. You will use this often- any time you want to combine things into a vector.
:::

```{r}
c("hello", "my", "name", "is", "alison")
c(1:3, 20, 50)
```

::: callout-tip
## Heads up

R is **case-sensitive**, so `?dplyr` works but `?Dplyr` will not. Likewise, a variable called `A` is different from `a`.
:::

Open a new R script in RStudio by going to `File --> New File --> R Script`. For this first foray into R, we'll give you the code, so sit back and relax---feel free to copy and paste our code in with some small tweaks.

First load the packages:

``` {{r}}
library(babynames)  # contains the actual data
library(dplyr)      # for manipulating data
library(ggplot2)    # for plotting data
```

## Functions

Here are some critical commands to obtain a high-level overview (HLO) of your freshly read dataset in R. We'll call it saying hello to your dataset:

```{r hlo_dataset}
glimpse(babynames) # dplyr
head(babynames) # base R
tail(babynames) # same
names(babynames) # same
```

If you have done the above and produced sane-looking output, you are ready for the next step. We'll use the code below to create a new data frame called `alison`.

```{r manipulate_name_data}
alison <- 
  babynames |>
  filter(name == "Alison" | name == "Allison") |>
  filter(sex == "F") 
```

-   The first bit makes a new dataset called `alison` that is a copy of the `babynames` dataset- the `|>` tells you we are doing some other stuff to it later.

-   The second bit `filters` our `babynames` to only keep rows where the `name` is equal to "Alison" (read `==` as *"exactly equal to"*) *or* "Allison" (read `|` as *"or"*.)

-   The third bit applies another `filter` to keep only those where sex is female.

Let's check out the data.

```{r}
alison
glimpse(alison)
```

Again, if you have sane-looking output here, move along to plotting the data!

```{r plot_name_data}
plot <- ggplot(alison, aes(x = year, 
                           y = prop,  
                           group = name, 
                           color = name)) + 
  geom_line()  
```

Now if you did this right, you will not see your plot! Because we saved the `ggplot` with a name (`plot`), R just saved the object for you. But check out the top right pane in RStudio again: under `Values` you should see `plot`, so it is there, you just have to ask for it. Here's how:

```{r}
plot 
```

# Make a new name plot

Edit my code above to create a new dataset. Pick 2 names to compare how popular they each are (these could be different spellings of your own name, like I did, but you can choose any 2 names that are present in the dataset). Make the new plot, changing the name of the first argument `alison` in `ggplot()` to the name of your new dataset.

## Save and share

Save your work so you can share your favorite plot with us. You will not like the looks of your plot if you mouse over to `Export` and save it. Instead, use `ggplot2`'s command for saving a plot with sensible defaults:

``` {{r}}
help(ggsave)
```

``` {{r}}
ggsave("alison_hill.pdf", plot) # please make the filename unique!
```
